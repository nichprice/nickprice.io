{
  "cacheItemsMap": {
    "callback-functions.md": {
      "document": {
        "title": "JavaScript Callback Functions",
        "date": "2022-06-21T00:00:00.000Z",
        "body": {
          "raw": "\nCallback functions may not be fun at first, but don’t worry, they won’t kill you.\n\nOne of the first topics covered by devs who are learning to write JavaScript is functions. Functions are fairly straightforward for individuals with even the littlest amount of coding experience, but callback functions provide a layer of increased difficulty that many new devs struggle to grasp.\n\nFor example, the following is an example of a basic JavaScript function:\n\n        function multiply (a, b) {\n                return a * b;\n        }\n\nIn layman’s terms, this code has defined a function “multiply”. The function “multiply” has two parameters passed through it. Those parameters are a and b.\n\nIf one was to call or execute the function using the argument of 4 for a and 5 for b, it would be written as such:\n\n        multiply (4, 5)\n\nThis function when run in a console would return the value 20, representing the product of 4 \\* 5.\n\nFairly simple, no?\n\nCallback functions aren’t quite as easy. Here’s an example:\n\n        function multiplyAgain (c, d, callback){\n            return callback(c, d);\n        }\n\nRemember the parameters here are c, d, and callback. In this case the parameter callback is referring to a function. We can assign our arguments as 10 for c, 8 for d, and our multiply function as the “callback”.\n\nWhat this function does is run the callback function passing the c and d arguments into that function.\n\nPut simply\n\n        multiplyAgain(8, 10, multiply)\n\nWill return a value of 80.\n",
          "html": "<p>Callback functions may not be fun at first, but don’t worry, they won’t kill you.</p>\n<p>One of the first topics covered by devs who are learning to write JavaScript is functions. Functions are fairly straightforward for individuals with even the littlest amount of coding experience, but callback functions provide a layer of increased difficulty that many new devs struggle to grasp.</p>\n<p>For example, the following is an example of a basic JavaScript function:</p>\n<pre><code>    function multiply (a, b) {\n            return a * b;\n    }\n</code></pre>\n<p>In layman’s terms, this code has defined a function “multiply”. The function “multiply” has two parameters passed through it. Those parameters are a and b.</p>\n<p>If one was to call or execute the function using the argument of 4 for a and 5 for b, it would be written as such:</p>\n<pre><code>    multiply (4, 5)\n</code></pre>\n<p>This function when run in a console would return the value 20, representing the product of 4 * 5.</p>\n<p>Fairly simple, no?</p>\n<p>Callback functions aren’t quite as easy. Here’s an example:</p>\n<pre><code>    function multiplyAgain (c, d, callback){\n        return callback(c, d);\n    }\n</code></pre>\n<p>Remember the parameters here are c, d, and callback. In this case the parameter callback is referring to a function. We can assign our arguments as 10 for c, 8 for d, and our multiply function as the “callback”.</p>\n<p>What this function does is run the callback function passing the c and d arguments into that function.</p>\n<p>Put simply</p>\n<pre><code>    multiplyAgain(8, 10, multiply)\n</code></pre>\n<p>Will return a value of 80.</p>"
        },
        "_id": "callback-functions.md",
        "_raw": {
          "sourceFilePath": "callback-functions.md",
          "sourceFileName": "callback-functions.md",
          "sourceFileDir": ".",
          "contentType": "markdown",
          "flattenedPath": "callback-functions"
        },
        "type": "Blog",
        "slug": "callback-functions"
      },
      "documentHash": "1679605411077",
      "hasWarnings": false,
      "documentTypeName": "Blog"
    },
    "inverse-data-flow.md": {
      "document": {
        "title": "Inverse Data Flow",
        "date": "2022-05-31T00:00:00.000Z",
        "body": {
          "raw": "\nCoding can get… erm… confusing.\n\nIn my last post, I wrote about callback functions in JavaScript. I covered a very simple callback function, probably one of the most simple examples you’ll be able to find on the internet. In most practical applications, callback functions are more complicated.\n\nFortunately and unfortunately, as developers learn React.js, callback functions are reintroduced. This time, they’re more complicated than my highly simplified example of a few weeks ago, but in my opinion, they’re much more easy to grasp than most examples of vanilla JavaScript callback functions.\n\nLet’s dive in to inverse data flow.\n\nIn react, you can do what’s called “passing state”. State can be defined for any variable that is subject to change based on a users interaction with it via the DOM. Think of instagram’s like button. When the page first renders displaying a post that you haven’t previously seen or interacted with, the “like” button’s default state is set to “not liked”, as indicated by an empty heart.\n\nWhen you, the user, interacts with the DOM and “likes” the post, you have edited the state of the like button, and likely made a post request.\n\nLet’s now right this in code. I’m assuming you already have some indication of how state works.\n\nHere are three screenshots of three files. Instagram is the parent of IGPost, and IGPost is the parent of PostCard.\n\n    export default function Instagram() {\n        const [posts, setPosts] = useState([]);\n        const [like, setLike] = useState(\"\");\n\n        function toggle() {\n            setLike(!like)\n        }\n\n        useEffect(() => {\n            fetch(\"http://instagram\")\n            .then(r => r.json())\n            .then(d => setPosts(d))\n        }, [])\n\n        return(\n            <IGPost\n                posts={posts}\n                toggle={toggle}\n                like={like}\n            />\n        )\n    }\n\nHere we set the state of our “posts” and our “like” as well as our “toggle” function. We then pass this data to the child component, IGPost.\n\n    export default function IGPost({ posts, like, toggle }) {\n        return {\n            <div>\n                {posts.map((post) => {\n                    <PostCard\n                        key={post.id}\n                        post={post}\n                        like={like}\n                        toggle={toggle}\n                    />\n                })}\n            </div>\n        }\n    }\n\nIGPost receives this data, and will render one PostCard child component for each object in the array of posts. The PostCard child component will look like this:\n\n    export default function PostCard({ post, like, toggle }) {\n        return(\n            <div>\n                {post}\n                <button onClick={toggle}>\n                    {like ? '♡' : '❤️'}\n                </button>\n            </div>\n        )\n    }\n\nFinally we reach our like button. When this button is clicked, we run our “toggle” function which will change the state of our “like”(which exists in our most Parent component) back and forth between an empty heart and a full one.\n",
          "html": "<p>Coding can get… erm… confusing.</p>\n<p>In my last post, I wrote about callback functions in JavaScript. I covered a very simple callback function, probably one of the most simple examples you’ll be able to find on the internet. In most practical applications, callback functions are more complicated.</p>\n<p>Fortunately and unfortunately, as developers learn React.js, callback functions are reintroduced. This time, they’re more complicated than my highly simplified example of a few weeks ago, but in my opinion, they’re much more easy to grasp than most examples of vanilla JavaScript callback functions.</p>\n<p>Let’s dive in to inverse data flow.</p>\n<p>In react, you can do what’s called “passing state”. State can be defined for any variable that is subject to change based on a users interaction with it via the DOM. Think of instagram’s like button. When the page first renders displaying a post that you haven’t previously seen or interacted with, the “like” button’s default state is set to “not liked”, as indicated by an empty heart.</p>\n<p>When you, the user, interacts with the DOM and “likes” the post, you have edited the state of the like button, and likely made a post request.</p>\n<p>Let’s now right this in code. I’m assuming you already have some indication of how state works.</p>\n<p>Here are three screenshots of three files. Instagram is the parent of IGPost, and IGPost is the parent of PostCard.</p>\n<pre><code>export default function Instagram() {\n    const [posts, setPosts] = useState([]);\n    const [like, setLike] = useState(\"\");\n\n    function toggle() {\n        setLike(!like)\n    }\n\n    useEffect(() => {\n        fetch(\"http://instagram\")\n        .then(r => r.json())\n        .then(d => setPosts(d))\n    }, [])\n\n    return(\n        &#x3C;IGPost\n            posts={posts}\n            toggle={toggle}\n            like={like}\n        />\n    )\n}\n</code></pre>\n<p>Here we set the state of our “posts” and our “like” as well as our “toggle” function. We then pass this data to the child component, IGPost.</p>\n<pre><code>export default function IGPost({ posts, like, toggle }) {\n    return {\n        &#x3C;div>\n            {posts.map((post) => {\n                &#x3C;PostCard\n                    key={post.id}\n                    post={post}\n                    like={like}\n                    toggle={toggle}\n                />\n            })}\n        &#x3C;/div>\n    }\n}\n</code></pre>\n<p>IGPost receives this data, and will render one PostCard child component for each object in the array of posts. The PostCard child component will look like this:</p>\n<pre><code>export default function PostCard({ post, like, toggle }) {\n    return(\n        &#x3C;div>\n            {post}\n            &#x3C;button onClick={toggle}>\n                {like ? '♡' : '❤️'}\n            &#x3C;/button>\n        &#x3C;/div>\n    )\n}\n</code></pre>\n<p>Finally we reach our like button. When this button is clicked, we run our “toggle” function which will change the state of our “like”(which exists in our most Parent component) back and forth between an empty heart and a full one.</p>"
        },
        "_id": "inverse-data-flow.md",
        "_raw": {
          "sourceFilePath": "inverse-data-flow.md",
          "sourceFileName": "inverse-data-flow.md",
          "sourceFileDir": ".",
          "contentType": "markdown",
          "flattenedPath": "inverse-data-flow"
        },
        "type": "Blog",
        "slug": "inverse-data-flow"
      },
      "documentHash": "1679605411078",
      "hasWarnings": false,
      "documentTypeName": "Blog"
    },
    "nextjs.md": {
      "document": {
        "title": "Next.js",
        "date": "2023-03-08T00:00:00.000Z",
        "body": {
          "raw": "\nWhether you’re getting your feet wet as a developer or you’ve been around the block once or twice, you’ve probably heard of Next.js. _But what is it?_\n\nPlainly, Next.js is a React framework. Let’s break this down.\n\n## React, a JavaScript Library\n\nFirstly, we know that a JavaScript library is pre-written code that allows for easier development of JavaScript. You can think of a library as a repository of functions that are hidden beneath the surface.\n\nLet’s say that when building JavaScript web apps, you frequently found yourself writing three functions: x, y, and z. You also frequently found yourself later calling those three functions at the same time.\n\nWouldn’t it be nice if you simply had one built in function that did this for you? A function you never even had to declare in the first place? This is where libraries come in. They provide you with built in functions that are commonly used. In the context of our x, y, z example, the library would have a built in function, A, consisting of all the of parts of x, y, and z, and calls them all at the same time.\n\nTLDR; libraries are powerful tools that help you more quickly and efficiently write build apps.\n\n## Next.js, a React Framework\n\nThink broadly, what is a frame work? We can think of frameworks in regard to the building of a house. The frame and foundation always go up early in the building process and are then built around and on top of.\n\nWeb frameworks are very similar. They provide the scaffolding or a blueprint, for an app to be built on top of. They essentially provide you rules that you have to abide by in order not to break anything but they also provide built in functionality that makes it very easy to incorporate other pieces of tech.\n\nAn example would be data analytics. Would you rather build your own data analytics program from scratch, or would you prefer to simple install a few packages into your app and use a third party data analytics program built by a company who specializes on the subject?\n\nThere are arguments to be made for both, but for the most part, if you’re crunched for time or uninterested in learning about building a data analytics platform, a using a web framework that can easily integrate third party tech is very appealing.\n\n## Full Circle\n\n_Next.js is a React framework._\n\nApplying our knowledge of the power of libraries and frameworks, it it intuitively clear that a framework built to work with a library can be an incredibly powerful tool for developers.\n\nNext.js takes a lot of the guesswork out of building. By abiding by Next.js conventions, we can have a fairly advanced app up and running at a rate that developers previously would’ve never thought possible (just kidding, they knew it was only a matter of time).\n",
          "html": "<p>Whether you’re getting your feet wet as a developer or you’ve been around the block once or twice, you’ve probably heard of Next.js. <em>But what is it?</em></p>\n<p>Plainly, Next.js is a React framework. Let’s break this down.</p>\n<h2>React, a JavaScript Library</h2>\n<p>Firstly, we know that a JavaScript library is pre-written code that allows for easier development of JavaScript. You can think of a library as a repository of functions that are hidden beneath the surface.</p>\n<p>Let’s say that when building JavaScript web apps, you frequently found yourself writing three functions: x, y, and z. You also frequently found yourself later calling those three functions at the same time.</p>\n<p>Wouldn’t it be nice if you simply had one built in function that did this for you? A function you never even had to declare in the first place? This is where libraries come in. They provide you with built in functions that are commonly used. In the context of our x, y, z example, the library would have a built in function, A, consisting of all the of parts of x, y, and z, and calls them all at the same time.</p>\n<p>TLDR; libraries are powerful tools that help you more quickly and efficiently write build apps.</p>\n<h2>Next.js, a React Framework</h2>\n<p>Think broadly, what is a frame work? We can think of frameworks in regard to the building of a house. The frame and foundation always go up early in the building process and are then built around and on top of.</p>\n<p>Web frameworks are very similar. They provide the scaffolding or a blueprint, for an app to be built on top of. They essentially provide you rules that you have to abide by in order not to break anything but they also provide built in functionality that makes it very easy to incorporate other pieces of tech.</p>\n<p>An example would be data analytics. Would you rather build your own data analytics program from scratch, or would you prefer to simple install a few packages into your app and use a third party data analytics program built by a company who specializes on the subject?</p>\n<p>There are arguments to be made for both, but for the most part, if you’re crunched for time or uninterested in learning about building a data analytics platform, a using a web framework that can easily integrate third party tech is very appealing.</p>\n<h2>Full Circle</h2>\n<p><em>Next.js is a React framework.</em></p>\n<p>Applying our knowledge of the power of libraries and frameworks, it it intuitively clear that a framework built to work with a library can be an incredibly powerful tool for developers.</p>\n<p>Next.js takes a lot of the guesswork out of building. By abiding by Next.js conventions, we can have a fairly advanced app up and running at a rate that developers previously would’ve never thought possible (just kidding, they knew it was only a matter of time).</p>"
        },
        "_id": "nextjs.md",
        "_raw": {
          "sourceFilePath": "nextjs.md",
          "sourceFileName": "nextjs.md",
          "sourceFileDir": ".",
          "contentType": "markdown",
          "flattenedPath": "nextjs"
        },
        "type": "Blog",
        "slug": "nextjs"
      },
      "documentHash": "1679765303204",
      "hasWarnings": false,
      "documentTypeName": "Blog"
    },
    "nextjs2.md": {
      "document": {
        "title": "Next.js, part 2",
        "date": "2023-03-17T00:00:00.000Z",
        "body": {
          "raw": "\nIn the last post we dove into the semantics of what Next.js is. We started by providing definitions for both “library” and “framework”. We then explained that React is a JavaScript library and that Next.js is a React framework\n\nThis context can be useful for communicating what Next.js is, but it doesn’t provide us much beyond a surface level understanding of what a framework is. Essentially, we could delete “Next.js” from the last post and replace it with any other React framework. This information is helpful, but let’s answer a few more questions.\n\n## Why do we have React Frameworks?\n\nLet’s rewind a few years to 2013. Daniel Day Lewis just won an Oscar for his prolific role as Abraham Lincoln, Thrift Shop by Macklemore was the #1 song in America, and _drumroll please..._ **Facebook released the first version of React**. Not only did React immediately revolutionize the way websites are built, Facebook release the software as open source. Open source software (OSS) is software that allows the public to use, study, change, and distribute the the source code to anyone for any purpose.\n\nThis is very important! React quickly became a hit for all the right reasons. The early versions were easy to learn, simple to use, and they allowed devs to quickly build and deploy web apps. It’s widespread use and adoption meant that there was a large cohort of people using the technology who were of course software engineers themselves.\n\nIf the devs using React wanted to add functionality or modify the source code to prevent bugs, they had the ability to do so because the software was open source! They didn’t have to sit around and wait for the React team at Facebook to put the time into making and releasing changes. They were able to take matters into their own hands. They began to tailor the software to better meet their needs by building custom React frameworks.\n\n## How does Next.js expand upon React?\n\nThere are many elements that set Next.js apart from React. Here we’ll expand on a few key features.\n\n### Routing\n\nOne of the first differences you’ll encounter when building with Next.js is the routing system. There are pluses and minuses to all routing systems. What’s nice about Next.js’s routing system is that it’s very simple and intuitive. Start with a folder called “app”. Inside “app”, create a folder with the title of a route you’d like to build. For example, you can create a folder called “blog” and create a file in that folder called “page”. In your page file, write the code that you’d like to render on your “/blog” webpage. You now have a frontend endpoint “/blog” with content. It’s that simple.\n\n### SEO\n\nSEO can be very important for the success of a website these days. The content of your website doesn’t matter all that much if no one can find it. Next.js has a multitude of built in features that can help developers optimize their SEO and get their website found.\n\n### Speed\n\nNext.js uses a few tricks that developers can use to make their webpages run faster. Server side rendering using getServerSideProps(), static site generation using getStaticProps(), and image component optimization using next/image can increase the speed at which your webpage renders on the client and provide an experience that users really enjoy.\n\n### TypeScript\n\nType-safety ensures that datatypes remain consistent. For example, you can define a variable as a boolean. This ensures that the variable will remain a boolean. You’ll never wind up with a scenario where a string \"true\" is output, the datatype will remain boolean. While React doesn’t offer TypeScript, Next.js supports TS out of the box. When you run create-next-app to create your project, you are prompted to select either JavaScript or TypeScript.\n\nNext.js is a powerful React framework that has many use cases. It offers modern and intuitive features that can help devs quickly build web apps. Next.js is a product made by Vercel, a company that offers a full suite of developer tools and services that seemlessly integrate with one another. While there are absolutely reasons not to use Next.js, especially under certain circumstances, there are also many reasons that developers love using Next.js. Try Next.js out on your next project and I’m sure you’ll find some features that you’ll wish Facebook made available years ago.\n",
          "html": "<p>In the last post we dove into the semantics of what Next.js is. We started by providing definitions for both “library” and “framework”. We then explained that React is a JavaScript library and that Next.js is a React framework</p>\n<p>This context can be useful for communicating what Next.js is, but it doesn’t provide us much beyond a surface level understanding of what a framework is. Essentially, we could delete “Next.js” from the last post and replace it with any other React framework. This information is helpful, but let’s answer a few more questions.</p>\n<h2>Why do we have React Frameworks?</h2>\n<p>Let’s rewind a few years to 2013. Daniel Day Lewis just won an Oscar for his prolific role as Abraham Lincoln, Thrift Shop by Macklemore was the #1 song in America, and <em>drumroll please...</em> <strong>Facebook released the first version of React</strong>. Not only did React immediately revolutionize the way websites are built, Facebook release the software as open source. Open source software (OSS) is software that allows the public to use, study, change, and distribute the the source code to anyone for any purpose.</p>\n<p>This is very important! React quickly became a hit for all the right reasons. The early versions were easy to learn, simple to use, and they allowed devs to quickly build and deploy web apps. It’s widespread use and adoption meant that there was a large cohort of people using the technology who were of course software engineers themselves.</p>\n<p>If the devs using React wanted to add functionality or modify the source code to prevent bugs, they had the ability to do so because the software was open source! They didn’t have to sit around and wait for the React team at Facebook to put the time into making and releasing changes. They were able to take matters into their own hands. They began to tailor the software to better meet their needs by building custom React frameworks.</p>\n<h2>How does Next.js expand upon React?</h2>\n<p>There are many elements that set Next.js apart from React. Here we’ll expand on a few key features.</p>\n<h3>Routing</h3>\n<p>One of the first differences you’ll encounter when building with Next.js is the routing system. There are pluses and minuses to all routing systems. What’s nice about Next.js’s routing system is that it’s very simple and intuitive. Start with a folder called “app”. Inside “app”, create a folder with the title of a route you’d like to build. For example, you can create a folder called “blog” and create a file in that folder called “page”. In your page file, write the code that you’d like to render on your “/blog” webpage. You now have a frontend endpoint “/blog” with content. It’s that simple.</p>\n<h3>SEO</h3>\n<p>SEO can be very important for the success of a website these days. The content of your website doesn’t matter all that much if no one can find it. Next.js has a multitude of built in features that can help developers optimize their SEO and get their website found.</p>\n<h3>Speed</h3>\n<p>Next.js uses a few tricks that developers can use to make their webpages run faster. Server side rendering using getServerSideProps(), static site generation using getStaticProps(), and image component optimization using next/image can increase the speed at which your webpage renders on the client and provide an experience that users really enjoy.</p>\n<h3>TypeScript</h3>\n<p>Type-safety ensures that datatypes remain consistent. For example, you can define a variable as a boolean. This ensures that the variable will remain a boolean. You’ll never wind up with a scenario where a string \"true\" is output, the datatype will remain boolean. While React doesn’t offer TypeScript, Next.js supports TS out of the box. When you run create-next-app to create your project, you are prompted to select either JavaScript or TypeScript.</p>\n<p>Next.js is a powerful React framework that has many use cases. It offers modern and intuitive features that can help devs quickly build web apps. Next.js is a product made by Vercel, a company that offers a full suite of developer tools and services that seemlessly integrate with one another. While there are absolutely reasons not to use Next.js, especially under certain circumstances, there are also many reasons that developers love using Next.js. Try Next.js out on your next project and I’m sure you’ll find some features that you’ll wish Facebook made available years ago.</p>"
        },
        "_id": "nextjs2.md",
        "_raw": {
          "sourceFilePath": "nextjs2.md",
          "sourceFileName": "nextjs2.md",
          "sourceFileDir": ".",
          "contentType": "markdown",
          "flattenedPath": "nextjs2"
        },
        "type": "Blog",
        "slug": "nextjs2"
      },
      "documentHash": "1679765118418",
      "hasWarnings": false,
      "documentTypeName": "Blog"
    },
    "react-router-6.md": {
      "document": {
        "title": "React Router 6",
        "date": "2022-08-25T00:00:00.000Z",
        "body": {
          "raw": "\nEven though it may not seem like it, **_things get better over time_**. There may be times that it feels like the world around us is crumbling, that the state of society is degrading, and that the end is imminent. I promise you this, **_it isn't_**.\n\nBelieve it or not, humans really like problems and are very good at solving them. Progress is imminent. Look around you and ask questions about how things came to be. You’ll soon realize your entire existence is the result of millenia of human progress.\n\nEnter: react router 6.\n\nDuring my software engineering bootcamp we were taught React Router 5. I didn’t understand it. I didn’t want to understand it because I found it unintuitive. I learned what I needed to learn about it in oder to pass, and then I dropped it like a bad habit. When I began working on my final project, which provided me carte blanche on all decisions, I immediately dedicated some time toward learning react router 6.\n\nWorth it!\n\n[This video](https://www.youtube.com/watch?v=UjHT_NKR_gU) taught me all I needed to know, and I highly recommend you check it out.\n\nHere are some examples of what you can do and how:\n\n1.  BrowserRouter\n\n        <BrowserRouter>\n            <nav>\n                <span>\n                    <Link to =\"/\"> Home </Link>\n                    <Link to =\"/episodes\"> Episodes </Link>\n                    <Link to =\"/races\"> Race </Link>\n                </span>\n            </nav>\n            <Routes>\n                <Route path=\"/episodes\" element={<Episodes/>}/>\n                <Route path=\"/episodes/:id\" element={<EpisodePage/>}/>\n                <Route path=\"/races\" element={<Races/>}/>\n                <Route path=\"/races/:id\" element={<RacePage>}/>\n                <Route path=\"*\" element={<ErrorPage>}/>\n            </Routes>\n        <BrowserRouter>\n\nHere you see a BrowserRouter tage wrapping up my entire app. Let’s start with the Routes. The routes show what components you’re routed to and what URL to assign to that route. A very simple and more intuitive approach to routing than the React Router 5 predessor.\n\nWhat I love most is that you dedicate the element that corresponds with the Route. Very simply, the element is a component. You now have a webpage that corresponds to your component.\n\nAbove the Routes, you see a nav. Here’s where users interface with the DOM and get sent routed to the webapps webpages. Click on the Episodes link and you’ll be routed to the website’s /episodes URL.\n\n2.  useNavigate\n\n        import { useNavigate } from \"react-router-dom\"\n\n        function EpisodeCard({ episode }) {\n\n            let navigate = useNavigate();\n\n            return (\n\n                <div onClick={() => navigate(`/episodes/${episode.id}`)}>\n                    <img src={episode.insta_pic}/>\n                    <p>{episode.blurb}</p>\n                </div>\n\n            )\n        };\n\nHere we see useNavigate in action.\n\nWe’re using prop called “episode” that has unique id. We’re also using a div that when clicked, runs the useNavigate function that we defined as the constant “navigate” just above the return.\n\nWhen we click on the div, the use navigate takes a to the declared URL, which in this case is “/episodes/${episode.id}”\n\n3. useParams\n\nWhich leads us into useParams. You params can be very useful. Here we are plucking that id that we just defined in the useNavigate section. The issue was that the episode wasn’t accessible to this component the way it was for the last component. Rather that finagling a complicated fetch request to get the episode and then it’s id, we can pluck the id number from the URL of the page we’re on!\n\nFor instance, say we’re routed to episode id 3’s web page. We click on episode with the id 3 and then we land on the URL “/episodes/3”.\n\nWhen we do useParams, the function is plucking the “3” from our URL and then it’s plugged in anywhere we use the constant “id”. Which in this case, is on the last line of code.\n\nThat’s it!\n\nQuick, easy, and intuitive. I love this version of react router and I think you will too! If you have any questions or if there’s anything you’d like to debug together, I’m always glad to help out!\n\nHappy coding!\n",
          "html": "<p>Even though it may not seem like it, <strong><em>things get better over time</em></strong>. There may be times that it feels like the world around us is crumbling, that the state of society is degrading, and that the end is imminent. I promise you this, <strong><em>it isn't</em></strong>.</p>\n<p>Believe it or not, humans really like problems and are very good at solving them. Progress is imminent. Look around you and ask questions about how things came to be. You’ll soon realize your entire existence is the result of millenia of human progress.</p>\n<p>Enter: react router 6.</p>\n<p>During my software engineering bootcamp we were taught React Router 5. I didn’t understand it. I didn’t want to understand it because I found it unintuitive. I learned what I needed to learn about it in oder to pass, and then I dropped it like a bad habit. When I began working on my final project, which provided me carte blanche on all decisions, I immediately dedicated some time toward learning react router 6.</p>\n<p>Worth it!</p>\n<p><a href=\"https://www.youtube.com/watch?v=UjHT_NKR_gU\">This video</a> taught me all I needed to know, and I highly recommend you check it out.</p>\n<p>Here are some examples of what you can do and how:</p>\n<ol>\n<li>\n<p>BrowserRouter</p>\n<pre><code>&#x3C;BrowserRouter>\n    &#x3C;nav>\n        &#x3C;span>\n            &#x3C;Link to =\"/\"> Home &#x3C;/Link>\n            &#x3C;Link to =\"/episodes\"> Episodes &#x3C;/Link>\n            &#x3C;Link to =\"/races\"> Race &#x3C;/Link>\n        &#x3C;/span>\n    &#x3C;/nav>\n    &#x3C;Routes>\n        &#x3C;Route path=\"/episodes\" element={&#x3C;Episodes/>}/>\n        &#x3C;Route path=\"/episodes/:id\" element={&#x3C;EpisodePage/>}/>\n        &#x3C;Route path=\"/races\" element={&#x3C;Races/>}/>\n        &#x3C;Route path=\"/races/:id\" element={&#x3C;RacePage>}/>\n        &#x3C;Route path=\"*\" element={&#x3C;ErrorPage>}/>\n    &#x3C;/Routes>\n&#x3C;BrowserRouter>\n</code></pre>\n</li>\n</ol>\n<p>Here you see a BrowserRouter tage wrapping up my entire app. Let’s start with the Routes. The routes show what components you’re routed to and what URL to assign to that route. A very simple and more intuitive approach to routing than the React Router 5 predessor.</p>\n<p>What I love most is that you dedicate the element that corresponds with the Route. Very simply, the element is a component. You now have a webpage that corresponds to your component.</p>\n<p>Above the Routes, you see a nav. Here’s where users interface with the DOM and get sent routed to the webapps webpages. Click on the Episodes link and you’ll be routed to the website’s /episodes URL.</p>\n<ol start=\"2\">\n<li>\n<p>useNavigate</p>\n<pre><code>import { useNavigate } from \"react-router-dom\"\n\nfunction EpisodeCard({ episode }) {\n\n    let navigate = useNavigate();\n\n    return (\n\n        &#x3C;div onClick={() => navigate(`/episodes/${episode.id}`)}>\n            &#x3C;img src={episode.insta_pic}/>\n            &#x3C;p>{episode.blurb}&#x3C;/p>\n        &#x3C;/div>\n\n    )\n};\n</code></pre>\n</li>\n</ol>\n<p>Here we see useNavigate in action.</p>\n<p>We’re using prop called “episode” that has unique id. We’re also using a div that when clicked, runs the useNavigate function that we defined as the constant “navigate” just above the return.</p>\n<p>When we click on the div, the use navigate takes a to the declared URL, which in this case is “/episodes/${episode.id}”</p>\n<ol start=\"3\">\n<li>useParams</li>\n</ol>\n<p>Which leads us into useParams. You params can be very useful. Here we are plucking that id that we just defined in the useNavigate section. The issue was that the episode wasn’t accessible to this component the way it was for the last component. Rather that finagling a complicated fetch request to get the episode and then it’s id, we can pluck the id number from the URL of the page we’re on!</p>\n<p>For instance, say we’re routed to episode id 3’s web page. We click on episode with the id 3 and then we land on the URL “/episodes/3”.</p>\n<p>When we do useParams, the function is plucking the “3” from our URL and then it’s plugged in anywhere we use the constant “id”. Which in this case, is on the last line of code.</p>\n<p>That’s it!</p>\n<p>Quick, easy, and intuitive. I love this version of react router and I think you will too! If you have any questions or if there’s anything you’d like to debug together, I’m always glad to help out!</p>\n<p>Happy coding!</p>"
        },
        "_id": "react-router-6.md",
        "_raw": {
          "sourceFilePath": "react-router-6.md",
          "sourceFileName": "react-router-6.md",
          "sourceFileDir": ".",
          "contentType": "markdown",
          "flattenedPath": "react-router-6"
        },
        "type": "Blog",
        "slug": "react-router-6"
      },
      "documentHash": "1679701143935",
      "hasWarnings": false,
      "documentTypeName": "Blog"
    },
    "ruby-rails.md": {
      "document": {
        "title": "Rails vs. Ruby… What’s the Difference?",
        "date": "2022-08-03T00:00:00.000Z",
        "body": {
          "raw": "\nBefore there were cars, people rode horses.\n\nHorses smell bad, they're slow, they get tired and emotional, and they definitely don't have air conditioning. Henry Ford, Karl Benz, and Etienne Citroen were just a few of the folks who unhappy to be dependant on this method of transportation. They knew there had to be a better option for personal transportation. They wanted to go further, more quickly, and more comfortably than what a horse could manage.\n\nEnter the automobile!\n\nThe comparison between cars and horses is much like the comparison between Rails and Ruby. If cars have many horsepower, then Rails has many Rubypower.\n\n## Syntax\n\nFirst and foremost, it’s important to understand that Rails has been built on top of Ruby, it’s what we refer to as a “framework”. Therefore, Rails is written using the same syntax as Ruby. In JavaScript we write functions, whereas in Ruby we write methods. JS and Ruby are two different languages and therefore use two different syntaxes. Because Rails is built on top of Ruby, it uses same syntax as ruby and also uses methods.\n\nRails is what’s called an open source framework. It uses scripts that have been built by many different developers. Essentially this means that when you write a little bit of Rails code, under the hood you’re writing a lot of Ruby code.\n\n## A Caveat\n\nWe’ve established that Rails is more simple and more powerful than Ruby, so this means you’d always favor writing Rails over Ruby, unless you were super attached to it or just really enjoy writing more code than necessary, right?\n\nWell, not exactly. In the case of desktop applications where server side scripting is involved, Rails capability is highly limited and you may find yourself in a situation where you be better off using Ruby. Web apps are where Rails really shines.\n\n##Convention over Configuration\n\nRails was built on the principle of “convention over configuration”. Essentially this means that you’re never going to reinvent the wheel. It provides simple, prebuilt, high functioning wheels that are available for your use. Rather that you starting with a blank slate and attempting to channel you’re inner Leonardo DaVinci\n\n## MVC\n\nMotor Vehicle Commission? Not quite. Although we referenced cars earlier, this MVC has nothing to do with them. MVC stands for Model, View, and Controller. Rails was the first framework to be built using the MVC principle, and it really takes Ruby to the next level. Essentially, each represents a step in the process in which our code executes and moves information.\n\n[![Model view Controller flowchart](/public/blog-images/mvc.webp \"Model, View, Controller\")](https://miro.medium.com/v2/resize:fit:1100/format:webp/0*9BMe27IAf7XXQ19A.png)\n\nMVC is a whole topic that warrants its own separate blog post. CodeAcademy does a great job of summing up the importance of MVC:\n\n> MVC is short for Model, View, and Controller. MVC is a popular way of organizing your code. The big idea behind MVC is that each section of your code has a purpose, and those purposes are different. Some of your code holds the data of your app, some of your code makes your app look nice, and some of your code controls how your app functions.” — [CodeAcademy](https://www.codecademy.com/article/mvc)\n\nMVC revolutionized the simplicity of writing back end code and has since been adopted by other languages and frameworks.\n",
          "html": "<p>Before there were cars, people rode horses.</p>\n<p>Horses smell bad, they're slow, they get tired and emotional, and they definitely don't have air conditioning. Henry Ford, Karl Benz, and Etienne Citroen were just a few of the folks who unhappy to be dependant on this method of transportation. They knew there had to be a better option for personal transportation. They wanted to go further, more quickly, and more comfortably than what a horse could manage.</p>\n<p>Enter the automobile!</p>\n<p>The comparison between cars and horses is much like the comparison between Rails and Ruby. If cars have many horsepower, then Rails has many Rubypower.</p>\n<h2>Syntax</h2>\n<p>First and foremost, it’s important to understand that Rails has been built on top of Ruby, it’s what we refer to as a “framework”. Therefore, Rails is written using the same syntax as Ruby. In JavaScript we write functions, whereas in Ruby we write methods. JS and Ruby are two different languages and therefore use two different syntaxes. Because Rails is built on top of Ruby, it uses same syntax as ruby and also uses methods.</p>\n<p>Rails is what’s called an open source framework. It uses scripts that have been built by many different developers. Essentially this means that when you write a little bit of Rails code, under the hood you’re writing a lot of Ruby code.</p>\n<h2>A Caveat</h2>\n<p>We’ve established that Rails is more simple and more powerful than Ruby, so this means you’d always favor writing Rails over Ruby, unless you were super attached to it or just really enjoy writing more code than necessary, right?</p>\n<p>Well, not exactly. In the case of desktop applications where server side scripting is involved, Rails capability is highly limited and you may find yourself in a situation where you be better off using Ruby. Web apps are where Rails really shines.</p>\n<p>##Convention over Configuration</p>\n<p>Rails was built on the principle of “convention over configuration”. Essentially this means that you’re never going to reinvent the wheel. It provides simple, prebuilt, high functioning wheels that are available for your use. Rather that you starting with a blank slate and attempting to channel you’re inner Leonardo DaVinci</p>\n<h2>MVC</h2>\n<p>Motor Vehicle Commission? Not quite. Although we referenced cars earlier, this MVC has nothing to do with them. MVC stands for Model, View, and Controller. Rails was the first framework to be built using the MVC principle, and it really takes Ruby to the next level. Essentially, each represents a step in the process in which our code executes and moves information.</p>\n<p><a href=\"https://miro.medium.com/v2/resize:fit:1100/format:webp/0*9BMe27IAf7XXQ19A.png\"><img src=\"/public/blog-images/mvc.webp\" alt=\"Model view Controller flowchart\" title=\"Model, View, Controller\"></a></p>\n<p>MVC is a whole topic that warrants its own separate blog post. CodeAcademy does a great job of summing up the importance of MVC:</p>\n<blockquote>\n<p>MVC is short for Model, View, and Controller. MVC is a popular way of organizing your code. The big idea behind MVC is that each section of your code has a purpose, and those purposes are different. Some of your code holds the data of your app, some of your code makes your app look nice, and some of your code controls how your app functions.” — <a href=\"https://www.codecademy.com/article/mvc\">CodeAcademy</a></p>\n</blockquote>\n<p>MVC revolutionized the simplicity of writing back end code and has since been adopted by other languages and frameworks.</p>"
        },
        "_id": "ruby-rails.md",
        "_raw": {
          "sourceFilePath": "ruby-rails.md",
          "sourceFileName": "ruby-rails.md",
          "sourceFileDir": ".",
          "contentType": "markdown",
          "flattenedPath": "ruby-rails"
        },
        "type": "Blog",
        "slug": "ruby-rails"
      },
      "documentHash": "1679701540704",
      "hasWarnings": false,
      "documentTypeName": "Blog"
    },
    "sql.md": {
      "document": {
        "title": "What is SQL?",
        "date": "2022-07-13T00:00:00.000Z",
        "body": {
          "raw": "\nStructured Query Language, SQL, Sequel, Squirrel (colloquially). You’ll see it written and hear it spoken many different ways throughout the industry, but what is it?\n\nSQL is a coding language designed to communicate with databases. Think of any pre-1980s era piece of media. It’s likely that an image comes to mind of a secretary at a desk, with a filing cabinet full of paperwork. Often the same forms over and over again representing purchase orders, or client information, or monthly profit and loss statements. For a company, wouldn’t it be convenient to store all of that data into one spreadsheet? Wouldn’t it be great it you could then ask that spreadsheet questions about it’s contents in order to extract specific information? Yes and yes! That’s where a language like SQL comes in handy!\n\nBack to our example of an overflowing file cabinet. In modern times, this filing cabinet represents a database. SQL can extract information from the database, but what kind of information can it extract? SQL has many many commands that can be used to query a database, but some of the most common and most important are these commands:\n\nSELECT - extracts data from a database\nUPDATE - updates data in a database\nDELETE - deletes data from a database\nINSERT INTO - inserts new data into a database\nCREATE DATABASE - creates a new database\nALTER DATABASE - modifies a database\nCREATE TABLE - creates a new table\nALTER TABLE - modifies a table\nDROP TABLE - deletes a table\nCREATE INDEX - creates an index (search key)\nDROP INDEX - deletes an index\nLet’s breakdown an example of a specific query.\n\nW3 Schools provides a great simulator for SQL queries. In this example, we’re accessing a database that contains customer information. There are columns to the table, which are CustomerID, CustomerName, ContactName, Address, City, PostalCode, and Country. There are also 91 records in this spreadsheet (each representing a customer).\n\nA decent amount of information to look at all at once… What if the company who’s data this is wanted to find where most of their customers came from? Likely an employee who’s familiar with the regions that the company does business in would only need the customers city in order to get a good idea of where their customers are located. Columns like Address, PostalCode, and ContactName are superfluous when it comes to this query.\n\nLet’s use SQL to ask the database to return just the CustomerName, and the City. The line of code that we run is as follows:\n\n    SELECT CustomerName,City FROM Customers;\n\nThis code is quite simple to read. In our table called Customers, let’s just look at our CustomerName and City for each row. And of course, this returns a table that has two columns, Customer and City. Now, our employee has a much more simple table that they can scan through and ask even more questions.\n\nSQL is a very simple and very powerful language that pretty much anyone can benefit from learning. If you work in research, or marketing, or sales, learning SQL has capabilities that can make your job a whole lot easier, and in my opinion, very worth learning.\n",
          "html": "<p>Structured Query Language, SQL, Sequel, Squirrel (colloquially). You’ll see it written and hear it spoken many different ways throughout the industry, but what is it?</p>\n<p>SQL is a coding language designed to communicate with databases. Think of any pre-1980s era piece of media. It’s likely that an image comes to mind of a secretary at a desk, with a filing cabinet full of paperwork. Often the same forms over and over again representing purchase orders, or client information, or monthly profit and loss statements. For a company, wouldn’t it be convenient to store all of that data into one spreadsheet? Wouldn’t it be great it you could then ask that spreadsheet questions about it’s contents in order to extract specific information? Yes and yes! That’s where a language like SQL comes in handy!</p>\n<p>Back to our example of an overflowing file cabinet. In modern times, this filing cabinet represents a database. SQL can extract information from the database, but what kind of information can it extract? SQL has many many commands that can be used to query a database, but some of the most common and most important are these commands:</p>\n<p>SELECT - extracts data from a database\nUPDATE - updates data in a database\nDELETE - deletes data from a database\nINSERT INTO - inserts new data into a database\nCREATE DATABASE - creates a new database\nALTER DATABASE - modifies a database\nCREATE TABLE - creates a new table\nALTER TABLE - modifies a table\nDROP TABLE - deletes a table\nCREATE INDEX - creates an index (search key)\nDROP INDEX - deletes an index\nLet’s breakdown an example of a specific query.</p>\n<p>W3 Schools provides a great simulator for SQL queries. In this example, we’re accessing a database that contains customer information. There are columns to the table, which are CustomerID, CustomerName, ContactName, Address, City, PostalCode, and Country. There are also 91 records in this spreadsheet (each representing a customer).</p>\n<p>A decent amount of information to look at all at once… What if the company who’s data this is wanted to find where most of their customers came from? Likely an employee who’s familiar with the regions that the company does business in would only need the customers city in order to get a good idea of where their customers are located. Columns like Address, PostalCode, and ContactName are superfluous when it comes to this query.</p>\n<p>Let’s use SQL to ask the database to return just the CustomerName, and the City. The line of code that we run is as follows:</p>\n<pre><code>SELECT CustomerName,City FROM Customers;\n</code></pre>\n<p>This code is quite simple to read. In our table called Customers, let’s just look at our CustomerName and City for each row. And of course, this returns a table that has two columns, Customer and City. Now, our employee has a much more simple table that they can scan through and ask even more questions.</p>\n<p>SQL is a very simple and very powerful language that pretty much anyone can benefit from learning. If you work in research, or marketing, or sales, learning SQL has capabilities that can make your job a whole lot easier, and in my opinion, very worth learning.</p>"
        },
        "_id": "sql.md",
        "_raw": {
          "sourceFilePath": "sql.md",
          "sourceFileName": "sql.md",
          "sourceFileDir": ".",
          "contentType": "markdown",
          "flattenedPath": "sql"
        },
        "type": "Blog",
        "slug": "sql"
      },
      "documentHash": "1679607001436",
      "hasWarnings": false,
      "documentTypeName": "Blog"
    }
  }
}

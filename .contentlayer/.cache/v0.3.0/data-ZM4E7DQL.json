{
  "cacheItemsMap": {
    "callback-functions.md": {
      "document": {
        "title": "JavaScript Callback Functions",
        "date": "2022-06-21T00:00:00.000Z",
        "body": {
          "raw": "\nCallback functions may not be fun at first, but don’t worry, they won’t kill you.\n\nOne of the first topics covered by devs who are learning to write JavaScript is functions. Functions are fairly straightforward for individuals with even the littlest amount of coding experience, but callback functions provide a layer of increased difficulty that many new devs struggle to grasp.\n\nFor example, the following is an example of a basic JavaScript function:\n\n        function multiply (a, b) {\n                return a * b;\n        }\n\nIn layman’s terms, this code has defined a function “multiply”. The function “multiply” has two parameters passed through it. Those parameters are a and b.\n\nIf one was to call or execute the function using the argument of 4 for a and 5 for b, it would be written as such:\n\n        multiply (4, 5)\n\nThis function when run in a console would return the value 20, representing the product of 4 \\* 5.\n\nFairly simple, no?\n\nCallback functions aren’t quite as easy. Here’s an example:\n\n        function multiplyAgain (c, d, callback){\n            return callback(c, d);\n        }\n\nRemember the parameters here are c, d, and callback. In this case the parameter callback is referring to a function. We can assign our arguments as 10 for c, 8 for d, and our multiply function as the “callback”.\n\nWhat this function does is run the callback function passing the c and d arguments into that function.\n\nPut simply\n\n        multiplyAgain(8, 10, multiply)\n\nWill return a value of 80.\n",
          "html": "<p>Callback functions may not be fun at first, but don’t worry, they won’t kill you.</p>\n<p>One of the first topics covered by devs who are learning to write JavaScript is functions. Functions are fairly straightforward for individuals with even the littlest amount of coding experience, but callback functions provide a layer of increased difficulty that many new devs struggle to grasp.</p>\n<p>For example, the following is an example of a basic JavaScript function:</p>\n<pre><code>    function multiply (a, b) {\n            return a * b;\n    }\n</code></pre>\n<p>In layman’s terms, this code has defined a function “multiply”. The function “multiply” has two parameters passed through it. Those parameters are a and b.</p>\n<p>If one was to call or execute the function using the argument of 4 for a and 5 for b, it would be written as such:</p>\n<pre><code>    multiply (4, 5)\n</code></pre>\n<p>This function when run in a console would return the value 20, representing the product of 4 * 5.</p>\n<p>Fairly simple, no?</p>\n<p>Callback functions aren’t quite as easy. Here’s an example:</p>\n<pre><code>    function multiplyAgain (c, d, callback){\n        return callback(c, d);\n    }\n</code></pre>\n<p>Remember the parameters here are c, d, and callback. In this case the parameter callback is referring to a function. We can assign our arguments as 10 for c, 8 for d, and our multiply function as the “callback”.</p>\n<p>What this function does is run the callback function passing the c and d arguments into that function.</p>\n<p>Put simply</p>\n<pre><code>    multiplyAgain(8, 10, multiply)\n</code></pre>\n<p>Will return a value of 80.</p>"
        },
        "_id": "callback-functions.md",
        "_raw": {
          "sourceFilePath": "callback-functions.md",
          "sourceFileName": "callback-functions.md",
          "sourceFileDir": ".",
          "contentType": "markdown",
          "flattenedPath": "callback-functions"
        },
        "type": "Blog",
        "slug": "callback-functions"
      },
      "documentHash": "1679605411077",
      "hasWarnings": false,
      "documentTypeName": "Blog"
    },
    "inverse-data-flow.md": {
      "document": {
        "title": "Inverse Data Flow",
        "date": "2022-05-31T00:00:00.000Z",
        "body": {
          "raw": "\nCoding can get… erm… confusing.\n\nIn my last post, I wrote about callback functions in JavaScript. I covered a very simple callback function, probably one of the most simple examples you’ll be able to find on the internet. In most practical applications, callback functions are more complicated.\n\nFortunately and unfortunately, as developers learn React.js, callback functions are reintroduced. This time, they’re more complicated than my highly simplified example of a few weeks ago, but in my opinion, they’re much more easy to grasp than most examples of vanilla JavaScript callback functions.\n\nLet’s dive in to inverse data flow.\n\nIn react, you can do what’s called “passing state”. State can be defined for any variable that is subject to change based on a users interaction with it via the DOM. Think of instagram’s like button. When the page first renders displaying a post that you haven’t previously seen or interacted with, the “like” button’s default state is set to “not liked”, as indicated by an empty heart.\n\nWhen you, the user, interacts with the DOM and “likes” the post, you have edited the state of the like button, and likely made a post request.\n\nLet’s now right this in code. I’m assuming you already have some indication of how state works.\n\nHere are three screenshots of three files. Instagram is the parent of IGPost, and IGPost is the parent of PostCard.\n\n    export default function Instagram() {\n        const [posts, setPosts] = useState([]);\n        const [like, setLike] = useState(\"\");\n\n        function toggle() {\n            setLike(!like)\n        }\n\n        useEffect(() => {\n            fetch(\"http://instagram\")\n            .then(r => r.json())\n            .then(d => setPosts(d))\n        }, [])\n\n        return(\n            <IGPost\n                posts={posts}\n                toggle={toggle}\n                like={like}\n            />\n        )\n    }\n\nHere we set the state of our “posts” and our “like” as well as our “toggle” function. We then pass this data to the child component, IGPost.\n\n    export default function IGPost({ posts, like, toggle }) {\n        return {\n            <div>\n                {posts.map((post) => {\n                    <PostCard\n                        key={post.id}\n                        post={post}\n                        like={like}\n                        toggle={toggle}\n                    />\n                })}\n            </div>\n        }\n    }\n\nIGPost receives this data, and will render one PostCard child component for each object in the array of posts. The PostCard child component will look like this:\n\n    export default function PostCard({ post, like, toggle }) {\n        return(\n            <div>\n                {post}\n                <button onClick={toggle}>\n                    {like ? '♡' : '❤️'}\n                </button>\n            </div>\n        )\n    }\n\nFinally we reach our like button. When this button is clicked, we run our “toggle” function which will change the state of our “like”(which exists in our most Parent component) back and forth between an empty heart and a full one.\n",
          "html": "<p>Coding can get… erm… confusing.</p>\n<p>In my last post, I wrote about callback functions in JavaScript. I covered a very simple callback function, probably one of the most simple examples you’ll be able to find on the internet. In most practical applications, callback functions are more complicated.</p>\n<p>Fortunately and unfortunately, as developers learn React.js, callback functions are reintroduced. This time, they’re more complicated than my highly simplified example of a few weeks ago, but in my opinion, they’re much more easy to grasp than most examples of vanilla JavaScript callback functions.</p>\n<p>Let’s dive in to inverse data flow.</p>\n<p>In react, you can do what’s called “passing state”. State can be defined for any variable that is subject to change based on a users interaction with it via the DOM. Think of instagram’s like button. When the page first renders displaying a post that you haven’t previously seen or interacted with, the “like” button’s default state is set to “not liked”, as indicated by an empty heart.</p>\n<p>When you, the user, interacts with the DOM and “likes” the post, you have edited the state of the like button, and likely made a post request.</p>\n<p>Let’s now right this in code. I’m assuming you already have some indication of how state works.</p>\n<p>Here are three screenshots of three files. Instagram is the parent of IGPost, and IGPost is the parent of PostCard.</p>\n<pre><code>export default function Instagram() {\n    const [posts, setPosts] = useState([]);\n    const [like, setLike] = useState(\"\");\n\n    function toggle() {\n        setLike(!like)\n    }\n\n    useEffect(() => {\n        fetch(\"http://instagram\")\n        .then(r => r.json())\n        .then(d => setPosts(d))\n    }, [])\n\n    return(\n        &#x3C;IGPost\n            posts={posts}\n            toggle={toggle}\n            like={like}\n        />\n    )\n}\n</code></pre>\n<p>Here we set the state of our “posts” and our “like” as well as our “toggle” function. We then pass this data to the child component, IGPost.</p>\n<pre><code>export default function IGPost({ posts, like, toggle }) {\n    return {\n        &#x3C;div>\n            {posts.map((post) => {\n                &#x3C;PostCard\n                    key={post.id}\n                    post={post}\n                    like={like}\n                    toggle={toggle}\n                />\n            })}\n        &#x3C;/div>\n    }\n}\n</code></pre>\n<p>IGPost receives this data, and will render one PostCard child component for each object in the array of posts. The PostCard child component will look like this:</p>\n<pre><code>export default function PostCard({ post, like, toggle }) {\n    return(\n        &#x3C;div>\n            {post}\n            &#x3C;button onClick={toggle}>\n                {like ? '♡' : '❤️'}\n            &#x3C;/button>\n        &#x3C;/div>\n    )\n}\n</code></pre>\n<p>Finally we reach our like button. When this button is clicked, we run our “toggle” function which will change the state of our “like”(which exists in our most Parent component) back and forth between an empty heart and a full one.</p>"
        },
        "_id": "inverse-data-flow.md",
        "_raw": {
          "sourceFilePath": "inverse-data-flow.md",
          "sourceFileName": "inverse-data-flow.md",
          "sourceFileDir": ".",
          "contentType": "markdown",
          "flattenedPath": "inverse-data-flow"
        },
        "type": "Blog",
        "slug": "inverse-data-flow"
      },
      "documentHash": "1679605411078",
      "hasWarnings": false,
      "documentTypeName": "Blog"
    },
    "sql.md": {
      "document": {
        "title": "What is SQL?",
        "date": "2022-07-13T00:00:00.000Z",
        "body": {
          "raw": "\nStructured Query Language, SQL, Sequel, Squirrel (colloquially). You’ll see it written and hear it spoken many different ways throughout the industry, but what is it?\n\nSQL is a coding language designed to communicate with databases. Think of any pre-1980s era piece of media. It’s likely that an image comes to mind of a secretary at a desk, with a filing cabinet full of paperwork. Often the same forms over and over again representing purchase orders, or client information, or monthly profit and loss statements. For a company, wouldn’t it be convenient to store all of that data into one spreadsheet? Wouldn’t it be great it you could then ask that spreadsheet questions about it’s contents in order to extract specific information? Yes and yes! That’s where a language like SQL comes in handy!\n\nBack to our example of an overflowing file cabinet. In modern times, this filing cabinet represents a database. SQL can extract information from the database, but what kind of information can it extract? SQL has many many commands that can be used to query a database, but some of the most common and most important are these commands:\n\nSELECT - extracts data from a database\nUPDATE - updates data in a database\nDELETE - deletes data from a database\nINSERT INTO - inserts new data into a database\nCREATE DATABASE - creates a new database\nALTER DATABASE - modifies a database\nCREATE TABLE - creates a new table\nALTER TABLE - modifies a table\nDROP TABLE - deletes a table\nCREATE INDEX - creates an index (search key)\nDROP INDEX - deletes an index\nLet’s breakdown an example of a specific query.\n\nW3 Schools provides a great simulator for SQL queries. In this example, we’re accessing a database that contains customer information. There are columns to the table, which are CustomerID, CustomerName, ContactName, Address, City, PostalCode, and Country. There are also 91 records in this spreadsheet (each representing a customer).\n\nA decent amount of information to look at all at once… What if the company who’s data this is wanted to find where most of their customers came from? Likely an employee who’s familiar with the regions that the company does business in would only need the customers city in order to get a good idea of where their customers are located. Columns like Address, PostalCode, and ContactName are superfluous when it comes to this query.\n\nLet’s use SQL to ask the database to return just the CustomerName, and the City. The line of code that we run is as follows:\n\n    SELECT CustomerName,City FROM Customers;\n\nThis code is quite simple to read. In our table called Customers, let’s just look at our CustomerName and City for each row. And of course, this returns a table that has two columns, Customer and City. Now, our employee has a much more simple table that they can scan through and ask even more questions.\n\nSQL is a very simple and very powerful language that pretty much anyone can benefit from learning. If you work in research, or marketing, or sales, learning SQL has capabilities that can make your job a whole lot easier, and in my opinion, very worth learning.\n",
          "html": "<p>Structured Query Language, SQL, Sequel, Squirrel (colloquially). You’ll see it written and hear it spoken many different ways throughout the industry, but what is it?</p>\n<p>SQL is a coding language designed to communicate with databases. Think of any pre-1980s era piece of media. It’s likely that an image comes to mind of a secretary at a desk, with a filing cabinet full of paperwork. Often the same forms over and over again representing purchase orders, or client information, or monthly profit and loss statements. For a company, wouldn’t it be convenient to store all of that data into one spreadsheet? Wouldn’t it be great it you could then ask that spreadsheet questions about it’s contents in order to extract specific information? Yes and yes! That’s where a language like SQL comes in handy!</p>\n<p>Back to our example of an overflowing file cabinet. In modern times, this filing cabinet represents a database. SQL can extract information from the database, but what kind of information can it extract? SQL has many many commands that can be used to query a database, but some of the most common and most important are these commands:</p>\n<p>SELECT - extracts data from a database\nUPDATE - updates data in a database\nDELETE - deletes data from a database\nINSERT INTO - inserts new data into a database\nCREATE DATABASE - creates a new database\nALTER DATABASE - modifies a database\nCREATE TABLE - creates a new table\nALTER TABLE - modifies a table\nDROP TABLE - deletes a table\nCREATE INDEX - creates an index (search key)\nDROP INDEX - deletes an index\nLet’s breakdown an example of a specific query.</p>\n<p>W3 Schools provides a great simulator for SQL queries. In this example, we’re accessing a database that contains customer information. There are columns to the table, which are CustomerID, CustomerName, ContactName, Address, City, PostalCode, and Country. There are also 91 records in this spreadsheet (each representing a customer).</p>\n<p>A decent amount of information to look at all at once… What if the company who’s data this is wanted to find where most of their customers came from? Likely an employee who’s familiar with the regions that the company does business in would only need the customers city in order to get a good idea of where their customers are located. Columns like Address, PostalCode, and ContactName are superfluous when it comes to this query.</p>\n<p>Let’s use SQL to ask the database to return just the CustomerName, and the City. The line of code that we run is as follows:</p>\n<pre><code>SELECT CustomerName,City FROM Customers;\n</code></pre>\n<p>This code is quite simple to read. In our table called Customers, let’s just look at our CustomerName and City for each row. And of course, this returns a table that has two columns, Customer and City. Now, our employee has a much more simple table that they can scan through and ask even more questions.</p>\n<p>SQL is a very simple and very powerful language that pretty much anyone can benefit from learning. If you work in research, or marketing, or sales, learning SQL has capabilities that can make your job a whole lot easier, and in my opinion, very worth learning.</p>"
        },
        "_id": "sql.md",
        "_raw": {
          "sourceFilePath": "sql.md",
          "sourceFileName": "sql.md",
          "sourceFileDir": ".",
          "contentType": "markdown",
          "flattenedPath": "sql"
        },
        "type": "Blog",
        "slug": "sql"
      },
      "documentHash": "1679607001436",
      "hasWarnings": false,
      "documentTypeName": "Blog"
    },
    "ruby-rails.md": {
      "document": {
        "title": "Rails vs. Ruby… What’s the Difference?",
        "date": "2022-08-03T04:00:00.000Z",
        "body": {
          "raw": "\nBefore there were cars, people rode horses. They smelled bad, they were slow, they got tired and emotional, and they definitely didn’t have air conditioning. Henry Ford, Karl Benz, and Etienne Citroen were just a few of the folks unhappy with this status quo. They knew there had to be a better option for personal transportation. They wanted to go further, more quickly, and more comfortably than what the horse could could manage.\n\nEnter the automobile!\n\nThe comparison between cars and horses is much like the comparison between rails and ruby. If cars have many horsepower, then Rails has many rubypower.\n\n## Syntax\n\nFirst and foremost, it’s important to understand that Rails has been built on top of Ruby, it’s what we refer to as a “framework”. Therefore, Rails is written using the same syntax as Ruby. In JavaScript we write functions, whereas in Ruby we write methods. JS and Ruby are two different languages and therefore use two different syntax. Because Rails is built on top of Ruby, they same syntax as ruby, therefore they both use methods.\n\nRails is what’s called an open source framework. It uses scripts that have been built by many different developers. Essentially this means that when you write a little bit of Rails code, under the hood you’re writing a lot a bit of Ruby code.\n\n## A Caveat\n\nWe’ve established that Rails is more simple and more powerful than Ruby, so this means you’d always favor writing Rails over Ruby, unless you were super attached to it or just really enjoy writing more code than necessary, right?\n\nWell, not exactly. In the case of desktop applications where server side scripting is involved, Rails capability highly limited and you find yourself in a situation where you’re better off using Ruby. Web apps are where Rails really shines.\n\n##Convention over Configuration\n\nRails was built on the principle of “convention over configuration”. Essentially this means that you’re never going to reinvent the wheel. It provides simple, prebuilt, high functioning wheels that are available for your use. Rather that you starting with a blank slate and attempting to channel you’re inner Leonardo DaVinci\n\n## MVC\n\nMotor Vehicle Commission? Not quite. Although we referenced cars earlier, this MVC has nothing to do with them. MVC stands for Model, View, and Controller. Rails was the first framework to be built using the MVC principle, and it really takes Ruby to the next level. Essentially, each represents a step in the process in which our code executes and moves information.\n\n[![Model view Controller flowchart](/public/blog-images/mvc.webp \"Model, View, Controller\")](https://miro.medium.com/v2/resize:fit:1100/format:webp/0*9BMe27IAf7XXQ19A.png)\n\nMVC is a whole topic that warrants its own separate blog post. CodeAcademy does a great job of summing up the importance of MVC:\n\n> MVC is short for Model, View, and Controller. MVC is a popular way of organizing your code. The big idea behind MVC is that each section of your code has a purpose, and those purposes are different. Some of your code holds the data of your app, some of your code makes your app look nice, and some of your code controls how your app functions.” — [CodeAcademy](https://www.codecademy.com/article/mvc)\n\nMVC revolutionized the simplicity of writing back end code and has since been adopted by other\n",
          "html": "<p>Before there were cars, people rode horses. They smelled bad, they were slow, they got tired and emotional, and they definitely didn’t have air conditioning. Henry Ford, Karl Benz, and Etienne Citroen were just a few of the folks unhappy with this status quo. They knew there had to be a better option for personal transportation. They wanted to go further, more quickly, and more comfortably than what the horse could could manage.</p>\n<p>Enter the automobile!</p>\n<p>The comparison between cars and horses is much like the comparison between rails and ruby. If cars have many horsepower, then Rails has many rubypower.</p>\n<h2>Syntax</h2>\n<p>First and foremost, it’s important to understand that Rails has been built on top of Ruby, it’s what we refer to as a “framework”. Therefore, Rails is written using the same syntax as Ruby. In JavaScript we write functions, whereas in Ruby we write methods. JS and Ruby are two different languages and therefore use two different syntax. Because Rails is built on top of Ruby, they same syntax as ruby, therefore they both use methods.</p>\n<p>Rails is what’s called an open source framework. It uses scripts that have been built by many different developers. Essentially this means that when you write a little bit of Rails code, under the hood you’re writing a lot a bit of Ruby code.</p>\n<h2>A Caveat</h2>\n<p>We’ve established that Rails is more simple and more powerful than Ruby, so this means you’d always favor writing Rails over Ruby, unless you were super attached to it or just really enjoy writing more code than necessary, right?</p>\n<p>Well, not exactly. In the case of desktop applications where server side scripting is involved, Rails capability highly limited and you find yourself in a situation where you’re better off using Ruby. Web apps are where Rails really shines.</p>\n<p>##Convention over Configuration</p>\n<p>Rails was built on the principle of “convention over configuration”. Essentially this means that you’re never going to reinvent the wheel. It provides simple, prebuilt, high functioning wheels that are available for your use. Rather that you starting with a blank slate and attempting to channel you’re inner Leonardo DaVinci</p>\n<h2>MVC</h2>\n<p>Motor Vehicle Commission? Not quite. Although we referenced cars earlier, this MVC has nothing to do with them. MVC stands for Model, View, and Controller. Rails was the first framework to be built using the MVC principle, and it really takes Ruby to the next level. Essentially, each represents a step in the process in which our code executes and moves information.</p>\n<p><a href=\"https://miro.medium.com/v2/resize:fit:1100/format:webp/0*9BMe27IAf7XXQ19A.png\"><img src=\"/public/blog-images/mvc.webp\" alt=\"Model view Controller flowchart\" title=\"Model, View, Controller\"></a></p>\n<p>MVC is a whole topic that warrants its own separate blog post. CodeAcademy does a great job of summing up the importance of MVC:</p>\n<blockquote>\n<p>MVC is short for Model, View, and Controller. MVC is a popular way of organizing your code. The big idea behind MVC is that each section of your code has a purpose, and those purposes are different. Some of your code holds the data of your app, some of your code makes your app look nice, and some of your code controls how your app functions.” — <a href=\"https://www.codecademy.com/article/mvc\">CodeAcademy</a></p>\n</blockquote>\n<p>MVC revolutionized the simplicity of writing back end code and has since been adopted by other</p>"
        },
        "_id": "ruby-rails.md",
        "_raw": {
          "sourceFilePath": "ruby-rails.md",
          "sourceFileName": "ruby-rails.md",
          "sourceFileDir": ".",
          "contentType": "markdown",
          "flattenedPath": "ruby-rails"
        },
        "type": "Blog",
        "slug": "ruby-rails"
      },
      "documentHash": "1679608358768",
      "hasWarnings": false,
      "documentTypeName": "Blog"
    }
  }
}

[
  {
    "title": "JavaScript Callback Functions",
    "date": "2022-06-21T00:00:00.000Z",
    "body": {
      "raw": "\nCallback functions may not be fun at first, but don’t worry, they won’t kill you.\n\nOne of the first topics covered by devs who are learning to write JavaScript is functions. Functions are fairly straightforward for individuals with even the littlest amount of coding experience, but callback functions provide a layer of increased difficulty that many new devs struggle to grasp.\n\nFor example, the following is an example of a basic JavaScript function:\n\n        function multiply (a, b) {\n            return a * b;\n        }\n\nIn layman’s terms, this code has defined a function “multiply”. The function “multiply” has two parameters passed through it. Those parameters are a and b.\n\nIf one was to call or execute the function using the argument of 4 for a and 5 for b, it would be written as such:\n\n        multiply (4, 5)\n\nThis function when run in a console would return the value 20, representing the product of 4 \\* 5.\n\nFairly simple, no?\n\nCallback functions aren’t quite as easy. Here’s an example:\n\n        function multiplyAgain (c, d, callback){\n            return callback(c, d);\n        }\n\nRemember the parameters here are c, d, and callback. In this case the parameter callback is referring to a function. We can assign our arguments as 10 for c, 8 for d, and our multiply function as the “callback”.\n\nWhat this function does is run the callback function passing the c and d arguments into that function.\n\nPut simply\n\n        multiplyAgain(8, 10, multiply)\n\nWill return a value of 80.\n",
      "html": "<p>Callback functions may not be fun at first, but don’t worry, they won’t kill you.</p>\n<p>One of the first topics covered by devs who are learning to write JavaScript is functions. Functions are fairly straightforward for individuals with even the littlest amount of coding experience, but callback functions provide a layer of increased difficulty that many new devs struggle to grasp.</p>\n<p>For example, the following is an example of a basic JavaScript function:</p>\n<pre><code>    function multiply (a, b) {\n        return a * b;\n    }\n</code></pre>\n<p>In layman’s terms, this code has defined a function “multiply”. The function “multiply” has two parameters passed through it. Those parameters are a and b.</p>\n<p>If one was to call or execute the function using the argument of 4 for a and 5 for b, it would be written as such:</p>\n<pre><code>    multiply (4, 5)\n</code></pre>\n<p>This function when run in a console would return the value 20, representing the product of 4 * 5.</p>\n<p>Fairly simple, no?</p>\n<p>Callback functions aren’t quite as easy. Here’s an example:</p>\n<pre><code>    function multiplyAgain (c, d, callback){\n        return callback(c, d);\n    }\n</code></pre>\n<p>Remember the parameters here are c, d, and callback. In this case the parameter callback is referring to a function. We can assign our arguments as 10 for c, 8 for d, and our multiply function as the “callback”.</p>\n<p>What this function does is run the callback function passing the c and d arguments into that function.</p>\n<p>Put simply</p>\n<pre><code>    multiplyAgain(8, 10, multiply)\n</code></pre>\n<p>Will return a value of 80.</p>"
    },
    "_id": "callback-functions.md",
    "_raw": {
      "sourceFilePath": "callback-functions.md",
      "sourceFileName": "callback-functions.md",
      "sourceFileDir": ".",
      "contentType": "markdown",
      "flattenedPath": "callback-functions"
    },
    "type": "Blog",
    "slug": "callback-functions"
  },
  {
    "title": "Lorem Ipsum",
    "date": "2021-12-24T00:00:00.000Z",
    "body": {
      "raw": "\nUllamco et nostrud magna commodo nostrud occaecat quis pariatur id ipsum. Ipsum\nconsequat enim id excepteur consequat nostrud esse esse fugiat dolore.\nReprehenderit occaecat exercitation non cupidatat in eiusmod laborum ex eu\nfugiat aute culpa pariatur. Irure elit proident consequat veniam minim ipsum ex\npariatur.\n\nMollit nisi cillum exercitation minim officia velit laborum non Lorem\nadipisicing dolore. Labore commodo consectetur commodo velit adipisicing irure\ndolore dolor reprehenderit aliquip. Reprehenderit cillum mollit eiusmod\nexcepteur elit ipsum aute pariatur in. Cupidatat ex culpa velit culpa ad non\nlabore exercitation irure laborum.\n",
      "html": "<p>Ullamco et nostrud magna commodo nostrud occaecat quis pariatur id ipsum. Ipsum\nconsequat enim id excepteur consequat nostrud esse esse fugiat dolore.\nReprehenderit occaecat exercitation non cupidatat in eiusmod laborum ex eu\nfugiat aute culpa pariatur. Irure elit proident consequat veniam minim ipsum ex\npariatur.</p>\n<p>Mollit nisi cillum exercitation minim officia velit laborum non Lorem\nadipisicing dolore. Labore commodo consectetur commodo velit adipisicing irure\ndolore dolor reprehenderit aliquip. Reprehenderit cillum mollit eiusmod\nexcepteur elit ipsum aute pariatur in. Cupidatat ex culpa velit culpa ad non\nlabore exercitation irure laborum.</p>"
    },
    "_id": "post-03.md",
    "_raw": {
      "sourceFilePath": "post-03.md",
      "sourceFileName": "post-03.md",
      "sourceFileDir": ".",
      "contentType": "markdown",
      "flattenedPath": "post-03"
    },
    "type": "Blog",
    "slug": "post-03"
  },
  {
    "title": "Inverse Data Flow",
    "date": "2022-05-31T00:00:00.000Z",
    "body": {
      "raw": "\nCoding can get… erm… confusing.\n\nIn my last post, I wrote about callback functions in JavaScript. I covered a very simple callback function, probably one of the most simple examples you’ll be able to find on the internet. In most practical applications, callback functions are more complicated.\n\nFortunately and unfortunately, as developers learn React.js, callback functions are reintroduced. This time, they’re more complicated than my highly simplified example of a few weeks ago, but in my opinion, they’re much more easy to grasp than most examples of vanilla JavaScript callback functions.\n\nLet’s dive in to inverse data flow.\n\nIn react, you can do what’s called “passing state”. State can be defined for any variable that is subject to change based on a users interaction with it via the DOM. Think of instagram’s like button. When the page first renders displaying a post that you haven’t previously seen or interacted with, the “like” button’s default state is set to “not liked”, as indicated by an empty heart.\n\nWhen you, the user, interacts with the DOM and “likes” the post, you have edited the state of the like button, and likely made a post request.\n\nLet’s now right this in code. I’m assuming you already have some indication of how state works.\n\nHere are three screenshots of three files. Instagram is the parent of IGPost, and IGPost is the parent of PostCard.\n\n        export default function Instagram() {\n            const [posts, setPosts] = useState([]);\n            const [like, setLike] = useState(\"\");\n\n            function toggle() {\n                setLike(!like)\n            }\n\n            useEffect(() => {\n                fetch(\"http://instagram\")\n                .then(r => r.json())\n                .then(d => setPosts(d))\n            }, [])\n\n            return(\n                <IGPost\n                    posts={posts}\n                    toggle={toggle}\n                    like={like}\n                />\n            )\n        }\n\nHere we set the state of our “posts” and our “like” as well as our “toggle” function. We then pass this data to the child component, IGPost.\n\n        export default function IGPost({ posts, like, toggle }) {\n            return {\n                <div>\n                    {posts.map((post) => {\n                        <PostCard\n                            key={post.id}\n                            post={post}\n                            like={like}\n                            toggle={toggle}\n                        />\n                    })}\n                </div>\n            }\n        }\n\nIGPost receives this data, and will render one PostCard child component for each object in the array of posts. The PostCard child component will look like this:\n\n        export default function PostCard({ post, like, toggle }) {\n            return(\n                <div>\n                    {post}\n                    <button onClick={toggle}>\n                        {like ? '♡' : '❤️'}\n                    </button>\n                </div>\n            )\n        }\n\nFinally we reach our like button. When this button is clicked, we run our “toggle” function which will change the state of our “like”(which exists in our most Parent component) back and forth between an empty heart and a full one.\n",
      "html": "<p>Coding can get… erm… confusing.</p>\n<p>In my last post, I wrote about callback functions in JavaScript. I covered a very simple callback function, probably one of the most simple examples you’ll be able to find on the internet. In most practical applications, callback functions are more complicated.</p>\n<p>Fortunately and unfortunately, as developers learn React.js, callback functions are reintroduced. This time, they’re more complicated than my highly simplified example of a few weeks ago, but in my opinion, they’re much more easy to grasp than most examples of vanilla JavaScript callback functions.</p>\n<p>Let’s dive in to inverse data flow.</p>\n<p>In react, you can do what’s called “passing state”. State can be defined for any variable that is subject to change based on a users interaction with it via the DOM. Think of instagram’s like button. When the page first renders displaying a post that you haven’t previously seen or interacted with, the “like” button’s default state is set to “not liked”, as indicated by an empty heart.</p>\n<p>When you, the user, interacts with the DOM and “likes” the post, you have edited the state of the like button, and likely made a post request.</p>\n<p>Let’s now right this in code. I’m assuming you already have some indication of how state works.</p>\n<p>Here are three screenshots of three files. Instagram is the parent of IGPost, and IGPost is the parent of PostCard.</p>\n<pre><code>    export default function Instagram() {\n        const [posts, setPosts] = useState([]);\n        const [like, setLike] = useState(\"\");\n\n        function toggle() {\n            setLike(!like)\n        }\n\n        useEffect(() => {\n            fetch(\"http://instagram\")\n            .then(r => r.json())\n            .then(d => setPosts(d))\n        }, [])\n\n        return(\n            &#x3C;IGPost\n                posts={posts}\n                toggle={toggle}\n                like={like}\n            />\n        )\n    }\n</code></pre>\n<p>Here we set the state of our “posts” and our “like” as well as our “toggle” function. We then pass this data to the child component, IGPost.</p>\n<pre><code>    export default function IGPost({ posts, like, toggle }) {\n        return {\n            &#x3C;div>\n                {posts.map((post) => {\n                    &#x3C;PostCard\n                        key={post.id}\n                        post={post}\n                        like={like}\n                        toggle={toggle}\n                    />\n                })}\n            &#x3C;/div>\n        }\n    }\n</code></pre>\n<p>IGPost receives this data, and will render one PostCard child component for each object in the array of posts. The PostCard child component will look like this:</p>\n<pre><code>    export default function PostCard({ post, like, toggle }) {\n        return(\n            &#x3C;div>\n                {post}\n                &#x3C;button onClick={toggle}>\n                    {like ? '♡' : '❤️'}\n                &#x3C;/button>\n            &#x3C;/div>\n        )\n    }\n</code></pre>\n<p>Finally we reach our like button. When this button is clicked, we run our “toggle” function which will change the state of our “like”(which exists in our most Parent component) back and forth between an empty heart and a full one.</p>"
    },
    "_id": "inverse-data-flow.md",
    "_raw": {
      "sourceFilePath": "inverse-data-flow.md",
      "sourceFileName": "inverse-data-flow.md",
      "sourceFileDir": ".",
      "contentType": "markdown",
      "flattenedPath": "inverse-data-flow"
    },
    "type": "Blog",
    "slug": "inverse-data-flow"
  }
]